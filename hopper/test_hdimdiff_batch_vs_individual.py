#!/usr/bin/env python3
"""
Test script to verify that hdimdiff batch files contain exactly the same individual files
that would be generated by the original HDIMDIFF64 + HDIMDIFF192 logic
"""

import os
import itertools
import re

# Set environment variables like the actual setup
os.environ['FLASH_ATTENTION_DISABLE_SM80'] = 'TRUE'
os.environ['FLASH_ATTENTION_DISABLE_CLUSTER'] = 'TRUE'

# Copy the relevant variables from setup.py
DISABLE_SOFTCAP = os.getenv("FLASH_ATTENTION_DISABLE_SOFTCAP", "FALSE") == "TRUE"
DISABLE_SPLIT = os.getenv("FLASH_ATTENTION_DISABLE_SPLIT", "FALSE") == "TRUE"
DISABLE_PAGEDKV = os.getenv("FLASH_ATTENTION_DISABLE_PAGEDKV", "FALSE") == "TRUE"
DISABLE_PACKGQA = os.getenv("FLASH_ATTENTION_DISABLE_PACKGQA", "FALSE") == "TRUE"
DISABLE_FP16 = os.getenv("FLASH_ATTENTION_DISABLE_FP16", "FALSE") == "TRUE"
DISABLE_FP8 = os.getenv("FLASH_ATTENTION_DISABLE_FP8", "FALSE") == "TRUE"
DISABLE_HDIMDIFF64 = os.getenv("FLASH_ATTENTION_DISABLE_HDIMDIFF64", "FALSE") == "TRUE"
DISABLE_HDIMDIFF192 = os.getenv("FLASH_ATTENTION_DISABLE_HDIMDIFF192", "FALSE") == "TRUE"

DTYPE_FWD_SM90 = ["bf16"] + (["fp16"] if not DISABLE_FP16 else []) + (["e4m3"] if not DISABLE_FP8 else [])
HALF_DTYPE_FWD_SM90 = ["bf16"] + (["fp16"] if not DISABLE_FP16 else [])

HEAD_DIMENSIONS_DIFF64_FWD = (
    []
    + (["64_256"] if not DISABLE_HDIMDIFF64 else [])
    + (["64_512"] if not DISABLE_HDIMDIFF64 else [])
)
HEAD_DIMENSIONS_DIFF192_FWD = (
    []
    + (["192_128"] if not DISABLE_HDIMDIFF192 else [])
)

SPLIT = [""] + (["_split"] if not DISABLE_SPLIT else [])
PAGEDKV = [""] + (["_paged"] if not DISABLE_PAGEDKV else [])
SOFTCAP = [""] + (["_softcap"] if not DISABLE_SOFTCAP else [])
PACKGQA = [""] + (["_packgqa"] if not DISABLE_PACKGQA else [])

print(f'DISABLE_HDIMDIFF64: {DISABLE_HDIMDIFF64}')
print(f'DISABLE_HDIMDIFF192: {DISABLE_HDIMDIFF192}')
print(f'HEAD_DIMENSIONS_DIFF64_FWD: {HEAD_DIMENSIONS_DIFF64_FWD}')
print(f'HEAD_DIMENSIONS_DIFF192_FWD: {HEAD_DIMENSIONS_DIFF192_FWD}')
print(f'DTYPE_FWD_SM90: {DTYPE_FWD_SM90}')
print(f'HALF_DTYPE_FWD_SM90: {HALF_DTYPE_FWD_SM90}')

# Generate batch file list (what we want to use)
batch_files = [f"instantiations/flash_fwd_hdimdiff_{dtype}{paged}{split}{softcap}{packgqa}_sm90.cu"
               for dtype, split, paged, softcap, packgqa in itertools.product(DTYPE_FWD_SM90, SPLIT, PAGEDKV, SOFTCAP, PACKGQA)
               if not (packgqa and (paged or split))]

# Generate individual file lists (what original setup.py would create)
individual_files_diff64 = [f"flash_fwd_hdim{hdim}_{dtype}{paged}{split}{softcap}{packgqa}_sm90.cu"
                           for hdim, dtype, split, paged, softcap, packgqa in itertools.product(HEAD_DIMENSIONS_DIFF64_FWD, HALF_DTYPE_FWD_SM90, SPLIT, PAGEDKV, SOFTCAP, PACKGQA)
                           if not (packgqa and (paged or split))]

individual_files_diff192 = [f"flash_fwd_hdim{hdim}_{dtype}{paged}{split}{softcap}{packgqa}_sm90.cu"
                            for hdim, dtype, split, paged, softcap, packgqa in itertools.product(HEAD_DIMENSIONS_DIFF192_FWD, DTYPE_FWD_SM90, SPLIT, PAGEDKV, SOFTCAP, PACKGQA)
                            if not (packgqa and (paged or split))]

# Union of individual files
all_individual_files = individual_files_diff64 + individual_files_diff192

print(f'\nBatch files to check: {len(batch_files)}')
print(f'Individual DIFF64 files: {len(individual_files_diff64)}')
print(f'Individual DIFF192 files: {len(individual_files_diff192)}')
print(f'Total individual files: {len(all_individual_files)}')

if len(batch_files) > 0:
    print(f'\nFirst 3 batch files:')
    for f in batch_files[:3]:
        print(f'  {f}')

if len(all_individual_files) > 0:
    print(f'\nFirst 10 expected individual files:')
    for f in all_individual_files[:10]:
        print(f'  {f}')

# Read each batch file and extract #include statements
all_included_files = set()
batch_file_contents = {}

for batch_file in batch_files:
    if not os.path.exists(batch_file):
        print(f'‚ùå Batch file missing: {batch_file}')
        continue
    
    with open(batch_file, 'r') as f:
        content = f.read()
        batch_file_contents[batch_file] = content
    
    # Extract #include statements
    include_pattern = r'#include\s+"([^"]+)"'
    includes = re.findall(include_pattern, content)
    
    print(f'\nüìÅ {batch_file}:')
    print(f'   Includes {len(includes)} files:')
    for inc in includes[:5]:  # Show first 5
        print(f'     {inc}')
        all_included_files.add(inc)
    if len(includes) > 5:
        print(f'     ... and {len(includes) - 5} more')

print(f'\nüìä Summary:')
print(f'Total unique files included across all hdimdiff batch files: {len(all_included_files)}')
print(f'Expected individual hdimdiff files: {len(all_individual_files)}')

# Compare sets
expected_set = set(all_individual_files)
included_set = all_included_files

missing_in_batch = expected_set - included_set
extra_in_batch = included_set - expected_set

if missing_in_batch:
    print(f'\n‚ùå Files missing from hdimdiff batch files ({len(missing_in_batch)}):')
    for f in sorted(list(missing_in_batch))[:10]:
        print(f'  {f}')
    if len(missing_in_batch) > 10:
        print(f'  ... and {len(missing_in_batch) - 10} more')

if extra_in_batch:
    print(f'\n‚ö†Ô∏è  Extra files in hdimdiff batch files ({len(extra_in_batch)}):')
    for f in sorted(list(extra_in_batch))[:10]:
        print(f'  {f}')
    if len(extra_in_batch) > 10:
        print(f'  ... and {len(extra_in_batch) - 10} more')

if not missing_in_batch and not extra_in_batch:
    print(f'\n‚úÖ Perfect match! Hdimdiff batch files contain exactly the same files as individual approach.')
elif len(all_individual_files) == 0:
    print(f'\n‚ö†Ô∏è  No individual hdimdiff files expected (features disabled), so nothing to compare.')
else:
    print(f'\n‚ùå Mismatch detected!')

# Additional check: verify no duplicate files in individual lists
duplicates = set()
seen = set()
for f in all_individual_files:
    if f in seen:
        duplicates.add(f)
    seen.add(f)

if duplicates:
    print(f'\n‚ö†Ô∏è  Found {len(duplicates)} duplicate files in individual lists:')
    for f in sorted(list(duplicates))[:5]:
        print(f'  {f}')
else:
    print(f'\n‚úÖ No duplicates in individual file lists.')