#!/usr/bin/env python3
"""
Test script to verify that batch files contain exactly the same individual files
that would be generated by the original setup.py logic
"""

import os
import itertools
import re

# Set environment variables like the actual setup
os.environ['FLASH_ATTENTION_DISABLE_SM80'] = 'TRUE'
os.environ['FLASH_ATTENTION_DISABLE_CLUSTER'] = 'TRUE'

# Copy the relevant variables from setup.py
DISABLE_SOFTCAP = os.getenv("FLASH_ATTENTION_DISABLE_SOFTCAP", "FALSE") == "TRUE"
DISABLE_SPLIT = os.getenv("FLASH_ATTENTION_DISABLE_SPLIT", "FALSE") == "TRUE"
DISABLE_PAGEDKV = os.getenv("FLASH_ATTENTION_DISABLE_PAGEDKV", "FALSE") == "TRUE"
DISABLE_PACKGQA = os.getenv("FLASH_ATTENTION_DISABLE_PACKGQA", "FALSE") == "TRUE"
DISABLE_FP16 = os.getenv("FLASH_ATTENTION_DISABLE_FP16", "FALSE") == "TRUE"
DISABLE_FP8 = os.getenv("FLASH_ATTENTION_DISABLE_FP8", "FALSE") == "TRUE"
DISABLE_HDIM64 = os.getenv("FLASH_ATTENTION_DISABLE_HDIM64", "FALSE") == "TRUE"
DISABLE_HDIM96 = os.getenv("FLASH_ATTENTION_DISABLE_HDIM96", "FALSE") == "TRUE"
DISABLE_HDIM128 = os.getenv("FLASH_ATTENTION_DISABLE_HDIM128", "FALSE") == "TRUE"
DISABLE_HDIM192 = os.getenv("FLASH_ATTENTION_DISABLE_HDIM192", "FALSE") == "TRUE"
DISABLE_HDIM256 = os.getenv("FLASH_ATTENTION_DISABLE_HDIM256", "FALSE") == "TRUE"

DTYPE_FWD_SM90 = ["bf16"] + (["fp16"] if not DISABLE_FP16 else []) + (["e4m3"] if not DISABLE_FP8 else [])
HEAD_DIMENSIONS_FWD = (
    []
    + ([64] if not DISABLE_HDIM64 else [])
    + ([96] if not DISABLE_HDIM96 else [])
    + ([128] if not DISABLE_HDIM128 else [])
    + ([192] if not DISABLE_HDIM192 else [])
    + ([256] if not DISABLE_HDIM256 else [])
)
SPLIT = [""] + (["_split"] if not DISABLE_SPLIT else [])
PAGEDKV = [""] + (["_paged"] if not DISABLE_PAGEDKV else [])
SOFTCAP = [""] + (["_softcap"] if not DISABLE_SOFTCAP else [])
PACKGQA = [""] + (["_packgqa"] if not DISABLE_PACKGQA else [])

print(f'HEAD_DIMENSIONS_FWD: {HEAD_DIMENSIONS_FWD}')
print(f'DTYPE_FWD_SM90: {DTYPE_FWD_SM90}')

# Generate batch file list (what we're using now)
batch_files = [f"instantiations/flash_fwd_hdimall_{dtype}{paged}{split}{softcap}{packgqa}_sm90.cu"
               for dtype, split, paged, softcap, packgqa in itertools.product(DTYPE_FWD_SM90, SPLIT, PAGEDKV, SOFTCAP, PACKGQA)
               if not (packgqa and (paged or split))]

# Generate individual file list (what original setup.py would create)
individual_files = [f"flash_fwd_hdim{hdim}_{dtype}{paged}{split}{softcap}{packgqa}_sm90.cu"
                   for hdim, dtype, split, paged, softcap, packgqa in itertools.product(HEAD_DIMENSIONS_FWD, DTYPE_FWD_SM90, SPLIT, PAGEDKV, SOFTCAP, PACKGQA)
                   if not (packgqa and (paged or split))]

print(f'\nBatch files to check: {len(batch_files)}')
print(f'Expected individual files: {len(individual_files)}')

print(f'\nFirst 3 batch files:')
for f in batch_files[:3]:
    print(f'  {f}')

print(f'\nFirst 10 expected individual files:')
for f in individual_files[:10]:
    print(f'  {f}')

# Read each batch file and extract #include statements
all_included_files = set()
batch_file_contents = {}

for batch_file in batch_files:
    if not os.path.exists(batch_file):
        print(f'‚ùå Batch file missing: {batch_file}')
        continue
    
    with open(batch_file, 'r') as f:
        content = f.read()
        batch_file_contents[batch_file] = content
    
    # Extract #include statements
    include_pattern = r'#include\s+"([^"]+)"'
    includes = re.findall(include_pattern, content)
    
    print(f'\nüìÅ {batch_file}:')
    print(f'   Includes {len(includes)} files:')
    for inc in includes[:5]:  # Show first 5
        print(f'     {inc}')
        all_included_files.add(inc)
    if len(includes) > 5:
        print(f'     ... and {len(includes) - 5} more')

print(f'\nüìä Summary:')
print(f'Total unique files included across all batch files: {len(all_included_files)}')
print(f'Expected individual files: {len(individual_files)}')

# Compare sets
expected_set = set(individual_files)
included_set = all_included_files

missing_in_batch = expected_set - included_set
extra_in_batch = included_set - expected_set

if missing_in_batch:
    print(f'\n‚ùå Files missing from batch files ({len(missing_in_batch)}):')
    for f in sorted(list(missing_in_batch))[:10]:
        print(f'  {f}')
    if len(missing_in_batch) > 10:
        print(f'  ... and {len(missing_in_batch) - 10} more')

if extra_in_batch:
    print(f'\n‚ö†Ô∏è  Extra files in batch files ({len(extra_in_batch)}):')
    for f in sorted(list(extra_in_batch))[:10]:
        print(f'  {f}')
    if len(extra_in_batch) > 10:
        print(f'  ... and {len(extra_in_batch) - 10} more')

if not missing_in_batch and not extra_in_batch:
    print(f'\n‚úÖ Perfect match! Batch files contain exactly the same files as individual approach.')
else:
    print(f'\n‚ùå Mismatch detected!')